mkdir chapt2
cd chapt2
code ./

//文件名称 ros2_python_node.py

import rclpy
from rclpy.node import Node

def main():
    rclpy.init() #初始化
    node = Node('python_node')
    node.get_logger().info('你好 Python ')
    rclpy.spin(node)
    rclpy.shutdowm()

if __name__=='__main__':
    main()

export RCUTILS_CONSOLE_OUTPUT_FORMAT=[{function_name}:{line_number}]:{message}
printenv | grep RCU


//文件名称 ros2_python_node.cpp

#include"iostream"
int main(int argc,char **)
{
    std::ocut<<"参数数量="<<argc<<std:endl;
    std::ocut<<"程序名称="<<argv[0]<<std:endl;
    std::string arg1 = argv[1];
    if(arg1=="--help")
    {
        std::cout<<"这里是程序帮助"<<std::endl;
    }
    return 0;

}

//进行编译
g++ ros2_python_node.cpp
//执行文件
./a.out


#include "rclcpp/rclcpp.hpp"
int main(int argc,cahr **argv)
{
    rclcpp::init(argc,argv);
    auto node = std::make_shared<rclcpp::Node>("cpp_node");
    RCLCPP_INFO(node->get_logger(),"你好c++");
    rclcpp::spin(node);
    rclcpp::shutdowm();
}

//CMakeLists.txt
cmake_mimimum_required(VERSION 3.8)
project(ros2_cpp)
add_executable(ros2_cpp_node ros2_cpp_node.cpp)

find_package(rclcpp REQUIRED) #直接查找到对应的头文件和库文件
message(STATUS ${rclcpp_INCLUDE_DIRS})#头文件以及rclcpp依赖的头文件
message(STATUS ${rclcpp_LIBRARIES})#库文件以及rclcpp依赖的库文件

target_include_directories(ros2_cpp_node PUBLIC ${rclcpp_INCLUDE_DIRS})#头文件包含
target_link_libraries(ros2_cpp_node ${rclcpp_LIBRARIES})


cmake .
make
//执行文件
./ros2_cpp_node

//进行改文件名字，防止误用
mv CMakeList.txt CMakeList.txt.back
